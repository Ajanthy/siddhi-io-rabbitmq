{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-rabbitmq\n\n\nThe \nsiddhi-io-rabbitmq\n is an extension to \nSiddhi\n that publish and receive events from rabbitmq broker.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.1.1\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.rabbitmq\n/groupId\n\n        \nartifactId\nsiddhi-io-rabbitmq\n/artifactId\n\n        \nversion\nversion\nx.x.x\n/version\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nrabbitmq\n \n(Sink)\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\nrabbitmq\n \n(Source)\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-io-rabbitmq", 
            "text": "The  siddhi-io-rabbitmq  is an extension to  Siddhi  that publish and receive events from rabbitmq broker.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-rabbitmq"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.1.1 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.rabbitmq /groupId \n         artifactId siddhi-io-rabbitmq /artifactId \n         version version x.x.x /version /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "rabbitmq   (Sink) The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  rabbitmq   (Source) The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.1.1/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.1.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.1.1/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.1.0/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.1.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.1.0/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.20/", 
            "text": "API Docs - v1.0.20\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#api-docs-v1020", 
            "text": "", 
            "title": "API Docs - v1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.20/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.20/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.20/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.19/", 
            "text": "API Docs - v1.0.19\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#api-docs-v1019", 
            "text": "", 
            "title": "API Docs - v1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.19/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.19/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.19/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.18/", 
            "text": "API Docs - v1.0.18\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#api-docs-v1018", 
            "text": "", 
            "title": "API Docs - v1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.18/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.18/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.18/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.17/", 
            "text": "API Docs - v1.0.17\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#api-docs-v1017", 
            "text": "", 
            "title": "API Docs - v1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.17/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.17/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.17/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.16/", 
            "text": "API Docs - v1.0.16\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#api-docs-v1016", 
            "text": "", 
            "title": "API Docs - v1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.16/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.16/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.16/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.15/", 
            "text": "API Docs - v1.0.15\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#api-docs-v1015", 
            "text": "", 
            "title": "API Docs - v1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.15/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.15/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.15/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/1.0.14/", 
            "text": "API Docs - v1.0.14\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#api-docs-v1014", 
            "text": "", 
            "title": "API Docs - v1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.14/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/1.0.14/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.14/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.1.1\n\n\nSink\n\n\nrabbitmq \n(Sink)\n\n\nThe rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol\n\n\n\nSyntax\n\n\n@sink(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, delivery.mode=\nINT\n, content.type=\nSTRING\n, content.encoding=\nSTRING\n, priority=\nINT\n, correlation.id=\nSTRING\n, reply.to=\nSTRING\n, expiration=\nSTRING\n, message.id=\nSTRING\n, timestamp=\nSTRING\n, type=\nSTRING\n, user.id=\nSTRING\n, app.id=\nSTRING\n, routing.key=\nSTRING\n, headers=\nSTRING\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g.,\namqp://guest:guest\n, \namqp://guest:guest@localhost:5672\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it sends.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange.name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndelivery.mode\n\n        \nThis determines whether the connection should be persistent or not. The value must be either \n1\n or \n2\n.If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.type\n\n        \nThe message content type. This should be the \nMIME\n content type.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ncontent.encoding\n\n        \nThe message content encoding. The value should be \nMIME\n content encoding.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npriority\n\n        \nSpecify a value within the range 0 to 9 in this parameter to indicate the message priority.\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.id\n\n        \nThe message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nreply.to\n\n        \nThis is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the \nreply.to\n property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response).\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpiration\n\n        \nThe expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmessage.id\n\n        \nThe message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp\n\n        \nTimestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is \ndd/mm/yyyy\n.\n\n        \ncurrent timestamp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntype\n\n        \nThe type of the message. e.g., The type of the event or the command represented by the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nuser.id\n\n        \nThe user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \napp.id\n\n        \nThe identifier of the application that produced the message.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that sends the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n)\n@sink(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query publishes events to the \ndirect\n exchange with the \ndirect\n exchange type and the \ndirectTest\n routing key.\n\n\n\nSource\n\n\nrabbitmq \n(Source)\n\n\nThe rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol. \n\n\n\nSyntax\n\n\n@source(type=\nrabbitmq\n, uri=\nSTRING\n, heartbeat=\nINT\n, exchange.name=\nSTRING\n, exchange.type=\nSTRING\n, exchange.durable.enabled=\nBOOL\n, exchange.autodelete.enabled=\nBOOL\n, routing.key=\nSTRING\n, headers=\nSTRING\n, queue.name=\nSTRING\n, queue.durable.enabled=\nBOOL\n, queue.exclusive.enabled=\nBOOL\n, queue.autodelete.enabled=\nBOOL\n, tls.enabled=\nBOOL\n, tls.truststore.path=\nSTRING\n, tls.truststore.password=\nSTRING\n, tls.truststore.type=\nSTRING\n, tls.version=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nuri\n\n        \nThe URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g.,\namqp://guest:guest\n,\namqp://guest:guest@localhost:5672\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nheartbeat\n\n        \nThe period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries.\n\n        \n60\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.name\n\n        \nThe name of the exchange that decides what to do with a message it receives.If the \nexchange.name\n already exists in the RabbitMQ server, then the system uses that \nexchange.name\n instead of redeclaring.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.type\n\n        \nThe type of the exchange name. The exchange types available are \ndirect\n, \nfanout\n, \ntopic\n and \nheaders\n. For a detailed description of each type, see \nRabbitMQ - AMQP Concepts\n. \n\n        \ndirect\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.durable.enabled\n\n        \nIf this is set to \ntrue\n, the exchange remains declared even if the broker restarts.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexchange.autodelete.enabled\n\n        \nIf this is set to \ntrue\n, the exchange is automatically deleted when it is not used anymore. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nrouting.key\n\n        \nThe key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the \nexchange.type\n parameter is \ndirect\n or \ntopic\n.\n\n        \nempty\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nThe headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding. \n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.name\n\n        \nA queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server. \n\n        \nsystem generated queue name\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.durable.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue remains declared even if the broker restarts\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.exclusive.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is exclusive for the current connection. If it is set to \nfalse\n, it is also consumable by other connections. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nqueue.autodelete.enabled\n\n        \nIf this parameter is set to \ntrue\n, the queue is automatically deleted when it is not used anymore.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to \ntrue\n, the \ntls.truststore.path\n and \ntls.truststore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.path\n\n        \nThe file path to the location of the truststore of the client that receives the RabbitMQ events via the \nAMQP\n protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/client-truststore.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.password\n\n        \nThe password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.truststore.type\n\n        \nThe type of the truststore.\n\n        \nJKS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.version\n\n        \nThe version of the tls/ssl.\n\n        \nSSL\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@App:name(\nTestExecutionPlan\n) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name = \nquery1\n) \n@source(type =\nrabbitmq\n,\nuri = \namqp://guest:guest@localhost:5672\n,\nexchange.name = \ndirect\n,\nrouting.key= \ndirect\n,\n@map(type=\nxml\n))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;\n\n\n\n\n\nThis query receives events from the \ndirect\n exchange with the \ndirect\nexchange type, and the \ndirectTest\n routing key.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#rabbitmq-sink", 
            "text": "The rabbitmq sink pushes the events into a rabbitmq broker using the AMQP protocol  Syntax  @sink(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , delivery.mode= INT , content.type= STRING , content.encoding= STRING , priority= INT , correlation.id= STRING , reply.to= STRING , expiration= STRING , message.id= STRING , timestamp= STRING , type= STRING , user.id= STRING , app.id= STRING , routing.key= STRING , headers= STRING , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that used to connect to an AMQP server. If no URI is specified, an error is logged in the CLI.e.g., amqp://guest:guest ,  amqp://guest:guest@localhost:5672   \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it sends.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         Yes \n     \n     \n         exchange.type \n         The type of the exchange.name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts   \n         direct \n         STRING \n         Yes \n         Yes \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         Yes \n     \n     \n         delivery.mode \n         This determines whether the connection should be persistent or not. The value must be either  1  or  2 .If the delivery.mode = 1, then the connection is not persistent. If the delivery.mode = 2, then the connection is persistent. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         content.type \n         The message content type. This should be the  MIME  content type. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         content.encoding \n         The message content encoding. The value should be  MIME  content encoding. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         priority \n         Specify a value within the range 0 to 9 in this parameter to indicate the message priority. \n         0 \n         INT \n         Yes \n         Yes \n     \n     \n         correlation.id \n         The message correlated to the current message. e.g., The request to which this message is a reply. When a request arrives, a message describing the task is pushed to the queue by the front end server. After that the frontend server blocks to wait for a response message with the same correlation ID. A pool of worker machines listen on queue, and one of them picks up the task, performs it, and returns the result as message. Once a message with right correlation ID arrives, thefront end server continues to return the response to the caller.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         reply.to \n         This is an anonymous exclusive callback queue. When the RabbitMQ receives a message with the  reply.to  property, it sends the response to the mentioned queue. This is commonly used to name a reply queue (or any other identifier that helps a consumer application to direct its response). \n         null \n         STRING \n         Yes \n         No \n     \n     \n         expiration \n         The expiration time after which the message is deleted. The value of the expiration field describes the TTL (Time To Live) period in milliseconds. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         message.id \n         The message identifier. If applications need to identify messages, it is recommended that they use this attribute instead of putting it into the message payload. \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp \n         Timestamp of the moment when the message was sent. If you do not specify a value for this parameter, the system automatically generates the current date and time as the timestamp value. The format of the timestamp value is  dd/mm/yyyy . \n         current timestamp \n         STRING \n         Yes \n         No \n     \n     \n         type \n         The type of the message. e.g., The type of the event or the command represented by the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         user.id \n         The user ID specified here is verified by RabbitMQ against theuser name of the actual connection. This is an optional parameter. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         app.id \n         The identifier of the application that produced the message. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the excahnge determines how to route the message to the queue. The routing key is similar to an address for the message. \n         empty \n         STRING \n         Yes \n         Yes \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         Yes \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that sends the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 )\n@sink(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query publishes events to the  direct  exchange with the  direct  exchange type and the  directTest  routing key.", 
            "title": "rabbitmq (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#rabbitmq-source", 
            "text": "The rabbitmq source receives the events from the rabbitmq broker via the AMQP protocol.   Syntax  @source(type= rabbitmq , uri= STRING , heartbeat= INT , exchange.name= STRING , exchange.type= STRING , exchange.durable.enabled= BOOL , exchange.autodelete.enabled= BOOL , routing.key= STRING , headers= STRING , queue.name= STRING , queue.durable.enabled= BOOL , queue.exclusive.enabled= BOOL , queue.autodelete.enabled= BOOL , tls.enabled= BOOL , tls.truststore.path= STRING , tls.truststore.password= STRING , tls.truststore.type= STRING , tls.version= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         uri \n         The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., amqp://guest:guest , amqp://guest:guest@localhost:5672 \n         \n         STRING \n         No \n         No \n     \n     \n         heartbeat \n         The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries. \n         60 \n         INT \n         Yes \n         No \n     \n     \n         exchange.name \n         The name of the exchange that decides what to do with a message it receives.If the  exchange.name  already exists in the RabbitMQ server, then the system uses that  exchange.name  instead of redeclaring. \n         \n         STRING \n         No \n         No \n     \n     \n         exchange.type \n         The type of the exchange name. The exchange types available are  direct ,  fanout ,  topic  and  headers . For a detailed description of each type, see  RabbitMQ - AMQP Concepts .  \n         direct \n         STRING \n         Yes \n         No \n     \n     \n         exchange.durable.enabled \n         If this is set to  true , the exchange remains declared even if the broker restarts. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         exchange.autodelete.enabled \n         If this is set to  true , the exchange is automatically deleted when it is not used anymore.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         routing.key \n         The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the  exchange.type  parameter is  direct  or  topic . \n         empty \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding.  \n         null \n         STRING \n         Yes \n         No \n     \n     \n         queue.name \n         A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server.  \n         system generated queue name \n         STRING \n         Yes \n         No \n     \n     \n         queue.durable.enabled \n         If this parameter is set to  true , the queue remains declared even if the broker restarts \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.exclusive.enabled \n         If this parameter is set to  true , the queue is exclusive for the current connection. If it is set to  false , it is also consumable by other connections.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         queue.autodelete.enabled \n         If this parameter is set to  true , the queue is automatically deleted when it is not used anymore. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to  true , the  tls.truststore.path  and  tls.truststore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         tls.truststore.path \n         The file path to the location of the truststore of the client that receives the RabbitMQ events via the  AMQP  protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/client-truststore.jks \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.password \n         The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n     \n     \n         tls.truststore.type \n         The type of the truststore. \n         JKS \n         STRING \n         Yes \n         No \n     \n     \n         tls.version \n         The version of the tls/ssl. \n         SSL \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @App:name( TestExecutionPlan ) \ndefine stream FooStream (symbol string, price float, volume long); \n@info(name =  query1 ) \n@source(type = rabbitmq ,\nuri =  amqp://guest:guest@localhost:5672 ,\nexchange.name =  direct ,\nrouting.key=  direct ,\n@map(type= xml ))\nDefine stream BarStream (symbol string, price float, volume long);\nfrom FooStream select symbol, price, volume insert into BarStream;  This query receives events from the  direct  exchange with the  direct exchange type, and the  directTest  routing key.", 
            "title": "rabbitmq (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}